name: Translate Content with DeepL

on:
  # Manual triggering with language selection
  workflow_dispatch:
    inputs:
      target_language:
        description: 'Target language for translation (e.g., es, fr, de, it, pt)'
        required: true
        default: 'es'
        type: choice
        options:
          - es  # Spanish
          - fr  # French
          - de  # German
          - it  # Italian
          - pt  # Portuguese
          - nl  # Dutch
          - pl  # Polish
          - ru  # Russian
          - ja  # Japanese
          - ko  # Korean
          - zh  # Chinese
      content_type:
        description: 'Type of content to translate'
        required: true
        default: 'docs'
        type: choice
        options:
          - docs
          - posts
          - assets
          - specific_files
      specific_files:
        description: 'Specific files to translate (comma-separated, e.g., "docs/auth-and-config.md,docs/jira-projects-get.md")'
        required: false
        default: ''
        type: string
      force_retranslate:
        description: 'Force retranslation of existing files'
        required: false
        default: false
        type: boolean
      include_context:
        description: 'Include business context in DeepL translation'
        required: false
        default: true
        type: boolean

  # Trigger when English content changes (optional automatic translation)
  push:
    branches: [ main ]
    paths:
      - 'docs/*.md'
      - '_posts/*.md'
      - 'assets/*.m'
      - '!docs/*/'
      - '!_posts/*/'
      - '!assets/*/'

jobs:
  translate-content:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests python-dotenv

    - name: Configure DeepL API
      run: |
        echo "üîß Configuring DeepL API..."
        if [ -z "${{ secrets.DEEPL_API_KEY }}" ]; then
          echo "‚ùå DEEPL_API_KEY secret is not set"
          echo "Please add your DeepL API key as a repository secret"
          exit 1
        fi
        echo "‚úÖ DeepL API key configured"

    - name: Set up translation context
      run: |
        echo "üìù Setting up translation context..."
        python3 translation/setup-context.py
        echo "‚úÖ Translation context created"

    - name: Create language directory structure
      run: |
        echo "üìÅ Creating language directory structure..."
        
        TARGET_LANG="${{ github.event.inputs.target_language || 'es' }}"
        
        # Create language-specific directories
        mkdir -p "docs/$TARGET_LANG"
        mkdir -p "_posts/$TARGET_LANG"
        mkdir -p "assets/$TARGET_LANG"
        
        echo "‚úÖ Created directories for language: $TARGET_LANG"

    - name: Identify files to translate
      id: identify-files
      run: |
        echo "üîç Identifying files to translate..."
        
        TARGET_LANG="${{ github.event.inputs.target_language || 'es' }}"
        CONTENT_TYPE="${{ github.event.inputs.content_type || 'docs' }}"
        SPECIFIC_FILES="${{ github.event.inputs.specific_files || '' }}"
        FORCE_RETRANSLATE="${{ github.event.inputs.force_retranslate || 'false' }}"
        
        # Arrays to store file paths
        DOCS_FILES=()
        POSTS_FILES=()
        ASSETS_FILES=()
        
        # Handle specific files selection
        if [ "$CONTENT_TYPE" = "specific_files" ] && [ -n "$SPECIFIC_FILES" ]; then
          echo "üéØ Processing specific files: $SPECIFIC_FILES"
          
          # Split comma-separated files and process each
          IFS=',' read -ra FILES <<< "$SPECIFIC_FILES"
          for file in "${FILES[@]}"; do
            # Trim whitespace
            file=$(echo "$file" | xargs)
            
            if [ -f "$file" ]; then
              # Determine file type and add to appropriate array
              if [[ "$file" == docs/*.md ]]; then
                translated_file="docs/$TARGET_LANG/$(basename "$file")"
                if [ "$FORCE_RETRANSLATE" = "true" ] || [ ! -f "$translated_file" ]; then
                  DOCS_FILES+=("$file")
                  echo "  üìö Added docs file: $file"
                fi
              elif [[ "$file" == _posts/*.md ]]; then
                translated_file="_posts/$TARGET_LANG/$(basename "$file")"
                if [ "$FORCE_RETRANSLATE" = "true" ] || [ ! -f "$translated_file" ]; then
                  POSTS_FILES+=("$file")
                  echo "  üìù Added posts file: $file"
                fi
              elif [[ "$file" == assets/*.m ]]; then
                translated_file="assets/$TARGET_LANG/$(basename "$file")"
                if [ "$FORCE_RETRANSLATE" = "true" ] || [ ! -f "$translated_file" ]; then
                  ASSETS_FILES+=("$file")
                  echo "  ‚öôÔ∏è Added assets file: $file"
                fi
              else
                echo "  ‚ö†Ô∏è Skipping unsupported file: $file"
              fi
            else
              echo "  ‚ùå File not found: $file"
            fi
          done
        else
          # Handle content type selection
          echo "üìÇ Processing content type: $CONTENT_TYPE"
          
          # Find documentation files
          if [ "$CONTENT_TYPE" = "docs" ]; then
            for file in docs/*.md; do
              if [ -f "$file" ] && [ ! "$file" = "docs/README.md" ]; then
                translated_file="docs/$TARGET_LANG/$(basename "$file")"
                if [ "$FORCE_RETRANSLATE" = "true" ] || [ ! -f "$translated_file" ]; then
                  DOCS_FILES+=("$file")
                fi
              fi
            done
          fi
          
          # Find blog post files
          if [ "$CONTENT_TYPE" = "posts" ]; then
            for file in _posts/*.md; do
              if [ -f "$file" ]; then
                translated_file="_posts/$TARGET_LANG/$(basename "$file")"
                if [ "$FORCE_RETRANSLATE" = "true" ] || [ ! -f "$translated_file" ]; then
                  POSTS_FILES+=("$file")
                fi
              fi
            done
          fi
          
          # Find M code files (for front matter translation only)
          if [ "$CONTENT_TYPE" = "assets" ]; then
            for file in assets/*.m; do
              if [ -f "$file" ]; then
                translated_file="assets/$TARGET_LANG/$(basename "$file")"
                if [ "$FORCE_RETRANSLATE" = "true" ] || [ ! -f "$translated_file" ]; then
                  ASSETS_FILES+=("$file")
                fi
              fi
            done
          fi
        fi
        
        # Output file counts
        echo "docs_count=${#DOCS_FILES[@]}" >> $GITHUB_OUTPUT
        echo "posts_count=${#POSTS_FILES[@]}" >> $GITHUB_OUTPUT
        echo "assets_count=${#ASSETS_FILES[@]}" >> $GITHUB_OUTPUT
        
        # Create file lists for processing
        printf '%s\n' "${DOCS_FILES[@]}" > docs_files.txt
        printf '%s\n' "${POSTS_FILES[@]}" > posts_files.txt
        printf '%s\n' "${ASSETS_FILES[@]}" > assets_files.txt
        
        echo "üìä Files to translate:"
        echo "  - Documentation: ${#DOCS_FILES[@]} files"
        echo "  - Blog posts: ${#POSTS_FILES[@]} files"
        echo "  - M code files: ${#ASSETS_FILES[@]} files"
        
        # Show specific files if using specific_files mode
        if [ "$CONTENT_TYPE" = "specific_files" ]; then
          echo "üéØ Specific files selected:"
          if [ ${#DOCS_FILES[@]} -gt 0 ]; then
            printf '  üìö Docs: %s\n' "${DOCS_FILES[@]}"
          fi
          if [ ${#POSTS_FILES[@]} -gt 0 ]; then
            printf '  üìù Posts: %s\n' "${POSTS_FILES[@]}"
          fi
          if [ ${#ASSETS_FILES[@]} -gt 0 ]; then
            printf '  ‚öôÔ∏è Assets: %s\n' "${ASSETS_FILES[@]}"
          fi
        fi

    - name: Translate documentation files
      if: steps.identify-files.outputs.docs_count > 0
      env:
        DEEPL_API_KEY: ${{ secrets.DEEPL_API_KEY }}
      run: |
        echo "üìö Translating documentation files..."
        
        TARGET_LANG="${{ github.event.inputs.target_language || 'es' }}"
        python3 translation/translate-docs.py "$TARGET_LANG" "translation-context.txt"
        
        echo "‚úÖ Documentation translation completed"

    - name: Translate blog post files
      if: steps.identify-files.outputs.posts_count > 0
      env:
        DEEPL_API_KEY: ${{ secrets.DEEPL_API_KEY }}
      run: |
        echo "üìù Translating blog post files..."
        
        TARGET_LANG="${{ github.event.inputs.target_language || 'es' }}"
        python3 translation/translate-docs.py "$TARGET_LANG" "translation-context.txt"
        
        echo "‚úÖ Blog post translation completed"

    - name: Translate M code files (front matter only)
      if: steps.identify-files.outputs.assets_count > 0
      env:
        DEEPL_API_KEY: ${{ secrets.DEEPL_API_KEY }}
      run: |
        echo "‚öôÔ∏è Translating M code files (front matter only)..."
        
        TARGET_LANG="${{ github.event.inputs.target_language || 'es' }}"
        python3 translation/translate-assets.py "$TARGET_LANG" "translation-context.txt"
        
        echo "‚úÖ M code translation completed"

    - name: Check for translation changes
      id: git-check
      run: |
        echo "üîç Checking for translation changes..."
        
        TARGET_LANG="${{ github.event.inputs.target_language || 'es' }}"
        
        # Check for changes in language-specific directories
        if [ -n "$(git status --porcelain docs/$TARGET_LANG/ _posts/$TARGET_LANG/ assets/$TARGET_LANG/)" ]; then
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "üìù Translation changes detected"
          echo "Language: $TARGET_LANG"
          echo "Files changed:"
          git status --short "docs/$TARGET_LANG/" "_posts/$TARGET_LANG/" "assets/$TARGET_LANG/" || echo "No changes"
        else
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è No translation changes detected"
        fi

    - name: Commit and push translation changes
      if: steps.git-check.outputs.changes == 'true'
      run: |
        echo "üíæ Committing translation changes..."
        
        TARGET_LANG="${{ github.event.inputs.target_language || 'es' }}"
        CONTENT_TYPE="${{ github.event.inputs.content_type || 'docs' }}"
        SPECIFIC_FILES="${{ github.event.inputs.specific_files || '' }}"
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action - DeepL Translator"
        
        # Add translated files
        git add "docs/$TARGET_LANG/" "_posts/$TARGET_LANG/" "assets/$TARGET_LANG/"
        
        # Count files
        NEW_FILES=$(git diff --cached --name-only --diff-filter=A | wc -l)
        MODIFIED_FILES=$(git diff --cached --name-only --diff-filter=M | wc -l)
        
        # Create commit message
        if [ "$CONTENT_TYPE" = "specific_files" ] && [ -n "$SPECIFIC_FILES" ]; then
          COMMIT_MSG="üåç Translate specific files to $TARGET_LANG

        üìä Translation Summary:
        - Target Language: $TARGET_LANG
        - Content Type: Specific files
        - Selected Files: $SPECIFIC_FILES
        - New files: $NEW_FILES
        - Modified files: $MODIFIED_FILES
        - Translated with: DeepL API
        - Context: Business and technical terminology included
        
        üîç Files translated:
        $(git diff --cached --name-only | sed 's/^/- /')
        
        üìã Translation Rules:
        - Technical content (M code, API endpoints) preserved in English
        - Business context and explanations translated
        - Front matter updated with language metadata
        - Original file references maintained"
        else
          COMMIT_MSG="üåç Translate content to $TARGET_LANG

        üìä Translation Summary:
        - Target Language: $TARGET_LANG
        - Content Type: $CONTENT_TYPE
        - New files: $NEW_FILES
        - Modified files: $MODIFIED_FILES
        - Translated with: DeepL API
        - Context: Business and technical terminology included
        
        üîç Files translated:
        $(git diff --cached --name-only | sed 's/^/- /')
        
        üìã Translation Rules:
        - Technical content (M code, API endpoints) preserved in English
        - Business context and explanations translated
        - Front matter updated with language metadata
        - Original file references maintained"
        fi
        
        git commit -m "$COMMIT_MSG"
        git push
        
        echo "‚úÖ Translation changes committed and pushed"

    - name: Create translation summary
      run: |
        echo "## üåç Translation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        TARGET_LANG="${{ github.event.inputs.target_language || 'es' }}"
        CONTENT_TYPE="${{ github.event.inputs.content_type || 'docs' }}"
        
        if [ "${{ steps.git-check.outputs.changes }}" == "true" ]; then
          echo "‚úÖ **Status**: Translation completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "üåç **Target Language**: $TARGET_LANG" >> $GITHUB_STEP_SUMMARY
          echo "üìù **Content Type**: $CONTENT_TYPE" >> $GITHUB_STEP_SUMMARY
          echo "ü§ñ **Translation Engine**: DeepL API" >> $GITHUB_STEP_SUMMARY
          echo "üìÅ **Location**: \`docs/$TARGET_LANG/\`, \`_posts/$TARGET_LANG/\`, \`assets/$TARGET_LANG/\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ÑπÔ∏è **Status**: No translation changes needed" >> $GITHUB_STEP_SUMMARY
          echo "üéØ **Reason**: All files already translated or no changes detected" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Translation Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Source Language**: English" >> $GITHUB_STEP_SUMMARY
        echo "- **Context Included**: Business and technical terminology" >> $GITHUB_STEP_SUMMARY
        echo "- **Technical Content**: Preserved in English (M code, API endpoints)" >> $GITHUB_STEP_SUMMARY
        echo "- **Front Matter**: Translated with language metadata" >> $GITHUB_STEP_SUMMARY
        echo "- **Quality**: Professional translation with domain-specific context" >> $GITHUB_STEP_SUMMARY

    - name: Notify on failure
      if: failure()
      run: |
        echo "## ‚ùå Translation Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The automated translation process encountered an error." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîç Troubleshooting" >> $GITHUB_STEP_SUMMARY
        echo "1. Check that DEEPL_API_KEY secret is set in repository settings" >> $GITHUB_STEP_SUMMARY
        echo "2. Verify DeepL API quota and billing status" >> $GITHUB_STEP_SUMMARY
        echo "3. Ensure source files are properly formatted" >> $GITHUB_STEP_SUMMARY
        echo "4. Review the action logs for specific error details" >> $GITHUB_STEP_SUMMARY
        echo "5. Check translation rules compliance" >> $GITHUB_STEP_SUMMARY
